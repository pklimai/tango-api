// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

package mocks

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"gitlab.com/zigal0-group/nica/tango-api/internal/domain"
)

// ParamRepoMock implements param_manager.paramRepo
type ParamRepoMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcGetParamByFilter          func(ctx context.Context, filter domain.ParamFilter) (p1 domain.Params, err error)
	inspectFuncGetParamByFilter   func(ctx context.Context, filter domain.ParamFilter)
	afterGetParamByFilterCounter  uint64
	beforeGetParamByFilterCounter uint64
	GetParamByFilterMock          mParamRepoMockGetParamByFilter
}

// NewParamRepoMock returns a mock for param_manager.paramRepo
func NewParamRepoMock(t minimock.Tester) *ParamRepoMock {
	m := &ParamRepoMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetParamByFilterMock = mParamRepoMockGetParamByFilter{mock: m}
	m.GetParamByFilterMock.callArgs = []*ParamRepoMockGetParamByFilterParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mParamRepoMockGetParamByFilter struct {
	mock               *ParamRepoMock
	defaultExpectation *ParamRepoMockGetParamByFilterExpectation
	expectations       []*ParamRepoMockGetParamByFilterExpectation

	callArgs []*ParamRepoMockGetParamByFilterParams
	mutex    sync.RWMutex
}

// ParamRepoMockGetParamByFilterExpectation specifies expectation struct of the paramRepo.GetParamByFilter
type ParamRepoMockGetParamByFilterExpectation struct {
	mock      *ParamRepoMock
	params    *ParamRepoMockGetParamByFilterParams
	paramPtrs *ParamRepoMockGetParamByFilterParamPtrs
	results   *ParamRepoMockGetParamByFilterResults
	Counter   uint64
}

// ParamRepoMockGetParamByFilterParams contains parameters of the paramRepo.GetParamByFilter
type ParamRepoMockGetParamByFilterParams struct {
	ctx    context.Context
	filter domain.ParamFilter
}

// ParamRepoMockGetParamByFilterParamPtrs contains pointers to parameters of the paramRepo.GetParamByFilter
type ParamRepoMockGetParamByFilterParamPtrs struct {
	ctx    *context.Context
	filter *domain.ParamFilter
}

// ParamRepoMockGetParamByFilterResults contains results of the paramRepo.GetParamByFilter
type ParamRepoMockGetParamByFilterResults struct {
	p1  domain.Params
	err error
}

// Expect sets up expected params for paramRepo.GetParamByFilter
func (mmGetParamByFilter *mParamRepoMockGetParamByFilter) Expect(ctx context.Context, filter domain.ParamFilter) *mParamRepoMockGetParamByFilter {
	if mmGetParamByFilter.mock.funcGetParamByFilter != nil {
		mmGetParamByFilter.mock.t.Fatalf("ParamRepoMock.GetParamByFilter mock is already set by Set")
	}

	if mmGetParamByFilter.defaultExpectation == nil {
		mmGetParamByFilter.defaultExpectation = &ParamRepoMockGetParamByFilterExpectation{}
	}

	if mmGetParamByFilter.defaultExpectation.paramPtrs != nil {
		mmGetParamByFilter.mock.t.Fatalf("ParamRepoMock.GetParamByFilter mock is already set by ExpectParams functions")
	}

	mmGetParamByFilter.defaultExpectation.params = &ParamRepoMockGetParamByFilterParams{ctx, filter}
	for _, e := range mmGetParamByFilter.expectations {
		if minimock.Equal(e.params, mmGetParamByFilter.defaultExpectation.params) {
			mmGetParamByFilter.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetParamByFilter.defaultExpectation.params)
		}
	}

	return mmGetParamByFilter
}

// ExpectCtxParam1 sets up expected param ctx for paramRepo.GetParamByFilter
func (mmGetParamByFilter *mParamRepoMockGetParamByFilter) ExpectCtxParam1(ctx context.Context) *mParamRepoMockGetParamByFilter {
	if mmGetParamByFilter.mock.funcGetParamByFilter != nil {
		mmGetParamByFilter.mock.t.Fatalf("ParamRepoMock.GetParamByFilter mock is already set by Set")
	}

	if mmGetParamByFilter.defaultExpectation == nil {
		mmGetParamByFilter.defaultExpectation = &ParamRepoMockGetParamByFilterExpectation{}
	}

	if mmGetParamByFilter.defaultExpectation.params != nil {
		mmGetParamByFilter.mock.t.Fatalf("ParamRepoMock.GetParamByFilter mock is already set by Expect")
	}

	if mmGetParamByFilter.defaultExpectation.paramPtrs == nil {
		mmGetParamByFilter.defaultExpectation.paramPtrs = &ParamRepoMockGetParamByFilterParamPtrs{}
	}
	mmGetParamByFilter.defaultExpectation.paramPtrs.ctx = &ctx

	return mmGetParamByFilter
}

// ExpectFilterParam2 sets up expected param filter for paramRepo.GetParamByFilter
func (mmGetParamByFilter *mParamRepoMockGetParamByFilter) ExpectFilterParam2(filter domain.ParamFilter) *mParamRepoMockGetParamByFilter {
	if mmGetParamByFilter.mock.funcGetParamByFilter != nil {
		mmGetParamByFilter.mock.t.Fatalf("ParamRepoMock.GetParamByFilter mock is already set by Set")
	}

	if mmGetParamByFilter.defaultExpectation == nil {
		mmGetParamByFilter.defaultExpectation = &ParamRepoMockGetParamByFilterExpectation{}
	}

	if mmGetParamByFilter.defaultExpectation.params != nil {
		mmGetParamByFilter.mock.t.Fatalf("ParamRepoMock.GetParamByFilter mock is already set by Expect")
	}

	if mmGetParamByFilter.defaultExpectation.paramPtrs == nil {
		mmGetParamByFilter.defaultExpectation.paramPtrs = &ParamRepoMockGetParamByFilterParamPtrs{}
	}
	mmGetParamByFilter.defaultExpectation.paramPtrs.filter = &filter

	return mmGetParamByFilter
}

// Inspect accepts an inspector function that has same arguments as the paramRepo.GetParamByFilter
func (mmGetParamByFilter *mParamRepoMockGetParamByFilter) Inspect(f func(ctx context.Context, filter domain.ParamFilter)) *mParamRepoMockGetParamByFilter {
	if mmGetParamByFilter.mock.inspectFuncGetParamByFilter != nil {
		mmGetParamByFilter.mock.t.Fatalf("Inspect function is already set for ParamRepoMock.GetParamByFilter")
	}

	mmGetParamByFilter.mock.inspectFuncGetParamByFilter = f

	return mmGetParamByFilter
}

// Return sets up results that will be returned by paramRepo.GetParamByFilter
func (mmGetParamByFilter *mParamRepoMockGetParamByFilter) Return(p1 domain.Params, err error) *ParamRepoMock {
	if mmGetParamByFilter.mock.funcGetParamByFilter != nil {
		mmGetParamByFilter.mock.t.Fatalf("ParamRepoMock.GetParamByFilter mock is already set by Set")
	}

	if mmGetParamByFilter.defaultExpectation == nil {
		mmGetParamByFilter.defaultExpectation = &ParamRepoMockGetParamByFilterExpectation{mock: mmGetParamByFilter.mock}
	}
	mmGetParamByFilter.defaultExpectation.results = &ParamRepoMockGetParamByFilterResults{p1, err}
	return mmGetParamByFilter.mock
}

// Set uses given function f to mock the paramRepo.GetParamByFilter method
func (mmGetParamByFilter *mParamRepoMockGetParamByFilter) Set(f func(ctx context.Context, filter domain.ParamFilter) (p1 domain.Params, err error)) *ParamRepoMock {
	if mmGetParamByFilter.defaultExpectation != nil {
		mmGetParamByFilter.mock.t.Fatalf("Default expectation is already set for the paramRepo.GetParamByFilter method")
	}

	if len(mmGetParamByFilter.expectations) > 0 {
		mmGetParamByFilter.mock.t.Fatalf("Some expectations are already set for the paramRepo.GetParamByFilter method")
	}

	mmGetParamByFilter.mock.funcGetParamByFilter = f
	return mmGetParamByFilter.mock
}

// When sets expectation for the paramRepo.GetParamByFilter which will trigger the result defined by the following
// Then helper
func (mmGetParamByFilter *mParamRepoMockGetParamByFilter) When(ctx context.Context, filter domain.ParamFilter) *ParamRepoMockGetParamByFilterExpectation {
	if mmGetParamByFilter.mock.funcGetParamByFilter != nil {
		mmGetParamByFilter.mock.t.Fatalf("ParamRepoMock.GetParamByFilter mock is already set by Set")
	}

	expectation := &ParamRepoMockGetParamByFilterExpectation{
		mock:   mmGetParamByFilter.mock,
		params: &ParamRepoMockGetParamByFilterParams{ctx, filter},
	}
	mmGetParamByFilter.expectations = append(mmGetParamByFilter.expectations, expectation)
	return expectation
}

// Then sets up paramRepo.GetParamByFilter return parameters for the expectation previously defined by the When method
func (e *ParamRepoMockGetParamByFilterExpectation) Then(p1 domain.Params, err error) *ParamRepoMock {
	e.results = &ParamRepoMockGetParamByFilterResults{p1, err}
	return e.mock
}

// GetParamByFilter implements param_manager.paramRepo
func (mmGetParamByFilter *ParamRepoMock) GetParamByFilter(ctx context.Context, filter domain.ParamFilter) (p1 domain.Params, err error) {
	mm_atomic.AddUint64(&mmGetParamByFilter.beforeGetParamByFilterCounter, 1)
	defer mm_atomic.AddUint64(&mmGetParamByFilter.afterGetParamByFilterCounter, 1)

	if mmGetParamByFilter.inspectFuncGetParamByFilter != nil {
		mmGetParamByFilter.inspectFuncGetParamByFilter(ctx, filter)
	}

	mm_params := ParamRepoMockGetParamByFilterParams{ctx, filter}

	// Record call args
	mmGetParamByFilter.GetParamByFilterMock.mutex.Lock()
	mmGetParamByFilter.GetParamByFilterMock.callArgs = append(mmGetParamByFilter.GetParamByFilterMock.callArgs, &mm_params)
	mmGetParamByFilter.GetParamByFilterMock.mutex.Unlock()

	for _, e := range mmGetParamByFilter.GetParamByFilterMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.p1, e.results.err
		}
	}

	if mmGetParamByFilter.GetParamByFilterMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetParamByFilter.GetParamByFilterMock.defaultExpectation.Counter, 1)
		mm_want := mmGetParamByFilter.GetParamByFilterMock.defaultExpectation.params
		mm_want_ptrs := mmGetParamByFilter.GetParamByFilterMock.defaultExpectation.paramPtrs

		mm_got := ParamRepoMockGetParamByFilterParams{ctx, filter}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGetParamByFilter.t.Errorf("ParamRepoMock.GetParamByFilter got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.filter != nil && !minimock.Equal(*mm_want_ptrs.filter, mm_got.filter) {
				mmGetParamByFilter.t.Errorf("ParamRepoMock.GetParamByFilter got unexpected parameter filter, want: %#v, got: %#v%s\n", *mm_want_ptrs.filter, mm_got.filter, minimock.Diff(*mm_want_ptrs.filter, mm_got.filter))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetParamByFilter.t.Errorf("ParamRepoMock.GetParamByFilter got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetParamByFilter.GetParamByFilterMock.defaultExpectation.results
		if mm_results == nil {
			mmGetParamByFilter.t.Fatal("No results are set for the ParamRepoMock.GetParamByFilter")
		}
		return (*mm_results).p1, (*mm_results).err
	}
	if mmGetParamByFilter.funcGetParamByFilter != nil {
		return mmGetParamByFilter.funcGetParamByFilter(ctx, filter)
	}
	mmGetParamByFilter.t.Fatalf("Unexpected call to ParamRepoMock.GetParamByFilter. %v %v", ctx, filter)
	return
}

// GetParamByFilterAfterCounter returns a count of finished ParamRepoMock.GetParamByFilter invocations
func (mmGetParamByFilter *ParamRepoMock) GetParamByFilterAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetParamByFilter.afterGetParamByFilterCounter)
}

// GetParamByFilterBeforeCounter returns a count of ParamRepoMock.GetParamByFilter invocations
func (mmGetParamByFilter *ParamRepoMock) GetParamByFilterBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetParamByFilter.beforeGetParamByFilterCounter)
}

// Calls returns a list of arguments used in each call to ParamRepoMock.GetParamByFilter.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetParamByFilter *mParamRepoMockGetParamByFilter) Calls() []*ParamRepoMockGetParamByFilterParams {
	mmGetParamByFilter.mutex.RLock()

	argCopy := make([]*ParamRepoMockGetParamByFilterParams, len(mmGetParamByFilter.callArgs))
	copy(argCopy, mmGetParamByFilter.callArgs)

	mmGetParamByFilter.mutex.RUnlock()

	return argCopy
}

// MinimockGetParamByFilterDone returns true if the count of the GetParamByFilter invocations corresponds
// the number of defined expectations
func (m *ParamRepoMock) MinimockGetParamByFilterDone() bool {
	for _, e := range m.GetParamByFilterMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetParamByFilterMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetParamByFilterCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetParamByFilter != nil && mm_atomic.LoadUint64(&m.afterGetParamByFilterCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetParamByFilterInspect logs each unmet expectation
func (m *ParamRepoMock) MinimockGetParamByFilterInspect() {
	for _, e := range m.GetParamByFilterMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ParamRepoMock.GetParamByFilter with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetParamByFilterMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetParamByFilterCounter) < 1 {
		if m.GetParamByFilterMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ParamRepoMock.GetParamByFilter")
		} else {
			m.t.Errorf("Expected call to ParamRepoMock.GetParamByFilter with params: %#v", *m.GetParamByFilterMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetParamByFilter != nil && mm_atomic.LoadUint64(&m.afterGetParamByFilterCounter) < 1 {
		m.t.Error("Expected call to ParamRepoMock.GetParamByFilter")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ParamRepoMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockGetParamByFilterInspect()
			m.t.FailNow()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ParamRepoMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ParamRepoMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetParamByFilterDone()
}
