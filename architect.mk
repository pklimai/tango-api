# Content generated by architect. DO NOT EDIT.
# You can extend or override anything in Makefile.

#======================================#
# EXPORT's
#======================================#

export GO111MODULE = on

#======================================#
# VARIABLES
#======================================#

## GENERAL
PROTOC_VERSION := 26.0
PROTO_VENDOR_DIR := vendor.protogen
GOLANGCI_TAG := 1.57.1
GEN_GENERAL_DIR := "./internal/generated"
GEN_API_DIR := $(GEN_GENERAL_DIR)/api
GEN_SWAGGER_DIR := $(GEN_GENERAL_DIR)/swagger/src
SWAGGER_UI_VERSION := 5.13.0

ifeq ($(shell uname -s), Linux)
PROTOC_FILE_NAME := protoc-$(PROTOC_VERSION)-linux-x86_64.zip
else
PROTOC_FILE_NAME := protoc-$(PROTOC_VERSION)-osx-aarch_64.zip
endif

## BINS
LOCAL_BIN := $(CURDIR)/bin
PROTOC_BIN := $(LOCAL_BIN)/protoc
PROTODEP_BIN := $(LOCAL_BIN)/protodep
GOIMPORTS_BIN := $(LOCAL_BIN)/goimports
GOLANGCI_BIN := $(LOCAL_BIN)/golangci-lint
ARCHITECT_BIN := $(LOCAL_BIN)/architect

#======================================#
# HELP
#======================================#

help: ## shows available targets with usage comment
	@sed \
		-e '/^[a-zA-Z0-9_\-]*:.*##/!d' \
		-e 's/:.*##\s*/:/' \
		-e 's/^\(.\+\):\(.*\)/$(shell tput setaf 4)\1$(shell tput sgr0):\2/' \
		$(MAKEFILE_LIST) | sort | column -t -s :

#======================================#
# INSTALLATION
#======================================#

.install-protoc: export GOBIN := $(LOCAL_BIN)
.install-protoc:
	$(info Installing protoc tool...)
	cd ./bin && \
	curl -LO https://github.com/protocolbuffers/protobuf/releases/download/v$(PROTOC_VERSION)/$(PROTOC_FILE_NAME) && \
	unzip $(PROTOC_FILE_NAME) && \
	mv -f ./bin/protoc . && \
	rm -f readme.txt && \
	rm -rf ./bin include $(PROTOC_FILE_NAME) && \
	cd ..

.bin-deps: export GOBIN := $(LOCAL_BIN)
.bin-deps:
	mkdir -p bin 

	@make .install-protoc

	$(info Installing tools for work...)
	go install github.com/stormcat24/protodep@latest
	go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
	go install github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-grpc-gateway@latest
	go install github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2@latest
	go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
	go install github.com/envoyproxy/protoc-gen-validate@latest
	go install golang.org/x/tools/cmd/goimports@latest
	go install gitlab.com/zigal0/architect/cmd/architect@latest
	
bin-deps: .bin-deps ## install necessary bin dependencies

.install-lint: export GOBIN := $(LOCAL_BIN)
.install-lint:
ifeq (,$(wildcard $(GOLANGCI_BIN)))
	$(info Installing golangci-lint v$(GOLANGCI_TAG))
	go install github.com/golangci/golangci-lint/cmd/golangci-lint@v$(GOLANGCI_TAG)
else
	$(info Golangci-lint is already installed to $(GOLANGCI_BIN))
endif

#======================================#
# GENERATION
#======================================#

.proto-vendor:
	$(info Downloading proto deps...)
	GOBIN=$(LOCAL_BIN) && $(PROTODEP_BIN) up -f

.generate:  export GOBIN := $(LOCAL_BIN)
.generate:
	$(info Generating protobuf GO files...)
	@mkdir -p $(GEN_API_DIR)

	$(PROTOC_BIN) \
		-I ./api \
		-I ./vendor.protogen \
		\
		--plugin $(LOCAL_BIN)/protoc-gen-go \
		--go_out $(GEN_API_DIR) \
		--go_opt paths=source_relative \
		\
		--plugin $(LOCAL_BIN)/protoc-gen-go-grpc \
		--go-grpc_out $(GEN_API_DIR) \
		--go-grpc_opt paths=source_relative \
		\
		--plugin $(LOCAL_BIN)/protoc-gen-grpc-gateway \
		--grpc-gateway_out $(GEN_API_DIR)  \
		--grpc-gateway_opt paths=source_relative \
		--grpc-gateway_opt logtostderr=true \
		--grpc-gateway_opt generate_unbound_methods=true \
		\
		--plugin $(LOCAL_BIN)/protoc-gen-validate \
		--validate_out $(GEN_API_DIR) \
		--validate_opt lang=go \
		--validate_opt paths=source_relative \
		$(shell ls ./api/*/*.proto)
	
	$(info Generating OpenAPI files...)
	@mkdir -p $(GEN_SWAGGER_DIR)

	$(PROTOC_BIN) \
		-I ./api \
		-I ./vendor.protogen \
		\
		--plugin $(LOCAL_BIN)/protoc-gen-openapiv2 \
		--openapiv2_out $(GEN_SWAGGER_DIR) \
		--openapiv2_opt logtostderr=true \
		--openapiv2_opt allow_merge=true \
		--openapiv2_opt generate_unbound_methods=true \
		--openapiv2_opt merge_file_name=go_reference_project \
		$(shell ls ./api/*/*.proto)

	$(info Generating services files...)
	$(ARCHITECT_BIN) generate services $(shell ls ./api)

	$(info Tidying module requirements...)
	go mod tidy

	$(info Running goimports...)
	@$(GOIMPORTS_BIN) -w .

.generate-swagger-ui:
	$(info Generating code for swagger-ui...)
	$(shell chmod +x script/generate_swagger_ui.sh)
	SWAGGER_UI_VERSION=v$(SWAGGER_UI_VERSION) GEN_SWAGGER_DIR=$(GEN_SWAGGER_DIR) ./script/generate_swagger_ui.sh

generate: .bin-deps .proto-vendor .generate .generate-swagger-ui ## generate files from proto

#======================================#
# TEST
#======================================#

.test:
	go test -race -count 100 ./...

test: .test # run all test in project

#======================================#
# CHECK
#======================================#

.lint: .install-lint
	$(info Running lint against changed files...)
	$(GOLANGCI_BIN) run \
		--new-from-rev=origin/main \
		--config=.golangci.yaml \
		./...

lint: .lint # run golangci-lint against changed files from main

.lint-full: .install-lint
	$(info Running lint all project files...)
	$(GOLANGCI_BIN) run \
		--config=.golangci.yaml \
		./...

lint-full: .lint-full # run golangci-lint against all project files

.pre-push:
	@$(GOIMPORTS_BIN) -w .
	go mod tidy
	@make .lint
	@make test

pre-push: .pre-push # execute checks before push

#======================================#
# RUN
#======================================#

.run:
	go run ./cmd/tango-api

run: .run ## run service

#======================================#
# PHONY
#======================================#

.PHONY: \
	.install-protoc \
    .bin-deps \
	bin-deps \
	.install-lint \
	.proto-vendor \
	.generate \
	.generate-swagger-ui \
	generate \
	.test \
	test \
	.lint \
	lint \
	.lint-full \
	lint-full \
	.pre-push \
	pre-push \
	.run \
	run